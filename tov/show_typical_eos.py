

from eos_class import EOS_BPSwithPolyCSS,EOS_CSS,EOS_BPSwithPoly
from tov_f import MassRadius_transition,MassRadius
from tov_CSS import MassRadius_CSS
import numpy as np
from fractions import Fraction
import matplotlib.pyplot as plt

def calculate_mass_radius(pressure_center,a,MassRadius_function):
    mass_radius=[]
    for i in range(len(pressure_center)):
        mass_radius.append ( MassRadius_function(pressure_center[i],1e-7,1e-4,'MR',a))
    mass_radius=np.array(mass_radius).transpose()
    return mass_radius

def plot_eos_mass_radius(pressure_eos,a,mass_radius,ax1,ax2,label_text):
    density=a.eosDensity(pressure_eos)
    #chempo=a.eosChempo(pressure_eos)
    #baryondensity=a.eosBaryonDensity(pressure_eos)
    #cs2=a.eosCs2(pressure_eos)

    ax1.plot(pressure_eos,density,label=label_text)
    ax1.set_xlabel('pressure (MeV fm$^{-3}$)')
    ax1.set_ylabel('density (MeV fm$^{-3}$)')
    ax1.set_xscale('log')
    ax1.set_yscale('log')
    ax1.set_xlim(pressure_eos[0],pressure_eos[-1])
    ax1.legend(loc=4,prop={'size':8},frameon=False)
    
    ax2.plot(mass_radius[1]/1000,mass_radius[0],label=label_text)
    ax2.set_xlabel('Radius(km)')
    ax2.set_ylabel('$M/M_{\odot}$')
    ax2.legend(loc=2,prop={'size':8},frameon=False)


args=[]
# =============================================================================
# args.append([0.059259259259259255, 20, 0.29600000000000004, 189001.58997465123, 0.5984, 1000000, 1.1840000000000002, 24.6951928009568, 366.73372512617965, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 94924.487703042716, 0.5984, 1000000, 1.1840000000000002, 27.156841960237088, 368.09204300831266, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 53495.658408988995, 0.5984, 1000000, 1.1840000000000002, 29.633400132678311, 369.2325428219043, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 32695.084614676052, 0.5984, 1000000, 1.1840000000000002, 32.168440163777333, 370.71513179007104, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 21313.080767633648, 0.5984, 1000000, 1.1840000000000002, 34.769445902454024, 371.8629049983582, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 14579.678003977384, 0.5984, 1000000, 1.1840000000000002, 37.474110309388692, 373.2708454628313, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 10377.125202612162, 0.5984, 1000000, 1.1840000000000002, 40.297448286093278, 374.8694579956975, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 7631.890222923812, 0.5984, 1000000, 1.1840000000000002, 43.258934193968216, 376.2854337135488, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 5753.4906583431348, 0.5984, 1000000, 1.1840000000000002, 46.411856351765046, 378.0001886575247, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 4438.7189745233036, 0.5984, 1000000, 1.1840000000000002, 49.759219742488931, 379.5620196040863, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 3492.9390799788757, 0.5984, 1000000, 1.1840000000000002, 53.328926901440241, 381.6472230736381, 1.0])
# args.append([0.059259259259259255, 20, 0.29600000000000004, 2786.277002382526, 0.5984, 1000000, 1.1840000000000002, 57.218966499913506, 384.0724173172024, 1.0])
# =============================================================================

# =============================================================================
# args.append([0.059259259259259255, 30, 0.29600000000000004, 5195374.1530634118, 0.5984, 1000000, 1.1840000000000002, 17.68286804252044, 410.2754190647776, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 1743678.2035818906, 0.5984, 1000000, 1.1840000000000002, 19.638818452187216, 404.2533853618254, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 673258.61569625488, 0.5984, 1000000, 1.1840000000000002, 21.75134424355203, 398.4281742499391, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 292538.92035749572, 0.5984, 1000000, 1.1840000000000002, 24.033274034369288, 392.816985047507, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 140558.89071286141, 0.5984, 1000000, 1.1840000000000002, 26.497528849238012, 387.449160083155, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 73496.103425008536, 0.5984, 1000000, 1.1840000000000002, 29.165181340385931, 382.2698683936981, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 41813.618188307228, 0.5984, 1000000, 1.1840000000000002, 31.990854776181632, 382.51876403612744, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 25981.593562135986, 0.5984, 1000000, 1.1840000000000002, 34.864844295484978, 384.92444129908716, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 17368.186071865181, 0.5984, 1000000, 1.1840000000000002, 37.759330967643031, 387.9668252344948, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 12236.504454881742, 0.5984, 1000000, 1.1840000000000002, 40.721862672188941, 390.45449860016197, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 8964.95457848148, 0.5984, 1000000, 1.1840000000000002, 43.797096487489441, 393.38250758020564, 1.0])
# args.append([0.059259259259259255, 30, 0.29600000000000004, 6773.527887225704, 0.5984, 1000000, 1.1840000000000002, 47.019566938863093, 396.50813188805495, 1.0])
# =============================================================================

# =============================================================================
# args.append([0.059259259259259255, 30, 0.29600000000000004, 25981.593562135986, 0.5984, 1000000, 1.1840000000000002, 34.864844295484978, 384.92444129908716, 1.0])
# args.append([0.059259259259259255,
#  3.0,
#  0.29600000000000004,
#  100,
#  0.5984,
#  1000000,
#  1.1840000000000002,
#  1.1618097293530305,
#  0,
#  0.3129165056475563])
# 
# args.append([  5.92592593e-02,   3.00000000e+00,   2.96000000e-01,
#          1.00000000e+02,   5.98400000e-01,   1.00000000e+06,
#          1.18400000e+00,   1.16180973e+00,   0.00000000e+00,
#          1.00000000e+00])
# 
# N=500
# pressure_eos = np.linspace(0.1,200,N*100)
# pressure_center = np.linspace(10,1000,N)
# mass_radius=[]
# for i in range(len(args)):
#     a=EOS_BPSwithPolyCSS(args[i])
#     mass_radius.append(calculate_mass_radius(pressure_center,a,MassRadius_transition))
# 
# maxmass_min=2.0
# maxmass_max=2.4
# label_text=[]
# label_text.append('$%.1f M_\odot<M_{max}<%.1f M_\odot$ upper bound'%(maxmass_min,maxmass_max))
# label_text.append('$%.1f M_\odot<M_{max}<%.1f M_\odot$ lower bound'%(maxmass_min,maxmass_max))
# label_text.append('$%.1f M_\odot<M_{max}< \infty$         lower bound'%(maxmass_min))
# 
# f, ((ax1, ax2)) = plt.subplots(1,2, sharex=False,figsize=(10, 5))
# for i in range(len(args)):
#     a=EOS_BPSwithPolyCSS(args[i])
#     plot_eos_mass_radius(pressure_eos,a,mass_radius[i],ax1,ax2,label_text[i])
# plt.show()
# =============================================================================


args=[]
args.append([0.059259259259259255, 30., 0.29600000000000004, 100., 0.5984, 1000., 1.1840000000000002])
args.append([0.059259259259259255, 20., 0.29600000000000004, 100., 0.5984, 1000., 1.1840000000000002])
args.append([0.059259259259259255, 10., 0.29600000000000004, 100., 0.5984, 1000., 1.1840000000000002])

args.append([0.059259259259259255, 30., 0.29600000000000004, 80., 0.5984, 1000., 1.1840000000000002])
args.append([0.059259259259259255, 20., 0.29600000000000004, 80., 0.5984, 1000., 1.1840000000000002])
args.append([0.059259259259259255, 10., 0.29600000000000004, 80., 0.5984, 1000., 1.1840000000000002])
# =============================================================================
# args.append([0.059259259259259255, 20, 0.29600000000000004, 100, 0.5984, 1000, 1.1840000000000002])
# args.append([0.059259259259259255, 15, 0.29600000000000004, 100, 0.5984, 1000, 1.1840000000000002])
# args.append([0.059259259259259255, 10, 0.29600000000000004, 100, 0.5984, 1000, 1.1840000000000002])
# 
# =============================================================================
N=500
pressure_eos = np.linspace(0.1,200,N)
pressure_center = np.linspace(10,1000,N)
mass_radius=[]
for i in range(len(args)):
    a=EOS_BPSwithPoly(args[i])
    mass_radius.append(calculate_mass_radius(pressure_center,a,MassRadius))
f, ((ax1, ax2)) = plt.subplots(1,2, sharex=False,figsize=(10, 5))
for i in range(len(args)):
    a=EOS_BPSwithPoly(args[i])
    plot_eos_mass_radius(pressure_eos,a,mass_radius[i],ax1,ax2,'.')
plt.show()

# =============================================================================
# a=EOS_CSS([627.675282406, 0.0, 0.16, Fraction(3, 3)])
# N=500
# pressure=np.linspace(1,200,N)
# density=a.eosDensity(pressure)
# chempo=a.eosChempo(pressure)
# baryondensity=a.eosBaryonDensity(pressure)
# cs2=a.eosCs2(pressure)
# 
# pressure_center = np.linspace(20,1000,N)
# mass_radius=[]
# for i in range(N):
#     mass_radius.append ( MassRadius_CSS(pressure_center[i],'MR',a))
# mass_radius=np.array(mass_radius).transpose()
# ax1.plot(pressure,density)
# ax1.set_xlabel('pressure (MeV fm$^{-3}$)')
# ax1.set_ylabel('density (MeV fm$^{-3}$)')
# ax2.plot(mass_radius[1]/1000,mass_radius[0])
# ax2.set_xlabel('Radius(km)')
# ax2.set_ylabel('$M/M_{\odot}')
# =============================================================================
